#!/bin/bash
# {{ ansible_managed }}

PATH="/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin:/bin"
LOCK="/tmp/.percona_lock"
DATADIR="{{ datadir }}"

if mkdir "$LOCK"
then
     # remove directory when script finishes
     trap 'rm -rf "$LOCK"' 0
else
     echo >&2 "unable to lock $LOCK"
     exit 0
fi

# disable the Percona service
function disable_percona_Solaris {
  echo "-- Disabling Percona service" `date`
  svcadm disable -s percona
  PERCONA_STATE=`svcs -a | grep percona | cut -d" " -f 1`
  if [ "${PERCONA_STATE}" != "disabled" ]; then
    echo "unable to disable percona service."
    exit 1
  fi
}

# enable the Percona service
function enable_percona_Solaris {
  echo "-- Enabling the Percona service" `date`
  svcadm enable -s percona
  PERCONA_STATE=`svcs -a | grep percona | cut -d" " -f 1`
  if [ "${PERCONA_STATE}" != "online" ]; then
    echo "unable to enable percona service."
    exit 1 
  fi
}

function enable_percona_Debian {
   service mysql start
   PERCONA_STATE=`pgrep mysqld`
   if [ "${PERCONA_STATE}" == "" ]; then
     echo "unable to enable percona service."
     exit 1
   fi
}

function disable_percona_Debian {
   service mysql stop
   PERCONA_STATE=`pgrep mysqld`
   if [ "${PERCONA_STATE}" != "" ]; then
     echo "unable to disable percona service."
     exit 1
   fi
}

function disable_percona {
   disable_percona_{{ ansible_os_family }}
}

function enable_percona {
   enable_percona_{{ ansible_os_family }}
}

# Capture backup source via command line argument
SOURCE=$1

# Error out if no backup source is defined via command line
if [ "${SOURCE}" = "" ]; then
  echo "Please enter a valid source! Example: {{ backup_directory }}/09181975.tgz"
  exit 1
fi

if [ "${DATADIR}" = "" ]; then
  echo "\$datadir must be set!"
  exit 1
fi

disable_percona

echo "-- Removing existing database files" `date`
rm -rf ${DATADIR}/*

echo "-- Extracting Db backup" `date`
cd ${DATADIR} && tar -xzif ${SOURCE}

echo "-- Preparing Db backup" `date`
innobackupex --apply-log --use-memory=1G ${DATADIR} 

echo "-- Changing permissions" `date`
chown -R mysql:mysql ${DATADIR}/

enable_percona
