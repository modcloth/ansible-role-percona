#!/bin/bash
# {{ ansible_managed }}

PATH="/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin:/bin"
LOCK="/tmp/.percona_lock"
BACKUP_DIR="{{ backup_directory }}"
DATE=`date +%Y%m%d%H%M`
HOSTNAME=`hostname`

if mkdir "$LOCK"
then
     # remove directory when script finishes
     trap 'rm -rf "$LOCK"' 0
else
     echo >&2 "unable to lock $LOCK"
     exit 0
fi

# argument is a filename for the backup
BACKUP_FILE=$1
# if none, uses backup_dir/hostname/data
if [ "${BACKUP_FILE}" = "" ]; then
        BACKUP_PATH=${BACKUP_DIR}/${HOSTNAME}
        BACKUP_FILE=${BACKUP_PATH}/${DATE}.gz
        mkdir -p ${BACKUP_PATH}
fi

# disable slave process
echo "STOP SLAVE;" | mysql 2> /dev/null

# run innobackupex
innobackupex --slave-info --stream=tar /tmp | gzip -c > $BACKUP_FILE

# restart slave
echo "START SLAVE;" | mysql 2> /dev/null

# to maintain compatibility with prior script, if invoked with no arugment
# place the date of the latest backup in a file in the backup_path
if [ "${BACKUP_PATH}" != "" ]; then
        echo "${DATE}" > ${BACKUP_PATH}/LATEST_BACKUP
fi
